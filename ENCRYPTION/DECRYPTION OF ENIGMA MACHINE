operation = input()
pseudo_random_number = int(input())
rotors = []
for i in range(3):
    rotor = input()
    rotors += [rotor]
message = input()

def cesar(message, decalage):
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    result = ""
    increment = 0
    for lettre in message.upper():
        if lettre in alphabet:  
            position = alphabet.find(lettre)
            position_nouvelle = (position + decalage + increment) % 26  
            result += alphabet[position_nouvelle]
        else:
            result += lettre
        increment += 1
    
    return result

def antiCesar(message, decalage):
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    result = ""
    increment = 0
    for lettre in message.upper():
        if lettre in alphabet:
            position = alphabet.find(lettre)
            position_origine = (position - decalage - increment) % 26
            result += alphabet[position_origine]
        else:
            result += lettre
        increment += 1
    
    return result

def rotor(message, rotor):
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    rotor_dict = {alphabet[i]: rotor[i] for i in range(len(alphabet))}
    return ''.join(rotor_dict[letter] for letter in message.upper() if letter in alphabet)

def antiRotor(message, rotor):
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    antiRotor_dict = {rotor[i]: alphabet[i] for i in range(len(alphabet))}
    return ''.join(antiRotor_dict[letter] for letter in message.upper() if letter in alphabet)

def enigma(message, decalage, rotor1, rotor2, rotor3):
    step0 = cesar(message, decalage)
    step1 = rotor(step0, rotor1)
    step2 = rotor(step1, rotor2)
    final_step = rotor(step2, rotor3)
    return final_step

def denigma(message, decalage, rotor1, rotor2, rotor3):
    step0 = antiRotor(message, rotor3)
    step1 = antiRotor(step0, rotor2)
    step2 = antiRotor(step1, rotor1)
    final_step = antiCesar(step2, decalage)
    return final_step

if operation == "ENCODE":
    print(enigma(message, pseudo_random_number, rotors[0], rotors[1], rotors[2]))

else:
    print(denigma(message, pseudo_random_number, rotors[0], rotors[1], rotors[2]))
